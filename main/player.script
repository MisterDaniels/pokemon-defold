local rendercam = require "rendercam.rendercam"

local tile_size = 16

function init(self)
	msg.post('.', 'acquire_input_focus')

	self.moving = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		new_pos = pos + self.dir
		
		go.set_position(new_pos)
		
		self.last_pos = pos
	end

	self.input.x = 0
	self.input.y = 0
	self.moving = false
end

function final(self)
	msg.post('.', 'release_input_focus')
end

function on_input(self, action_id, action)	
	if action_id == hash('shortcuts') and action.pressed then
		shortcut_trigger = true
	end

	if action_id == hash('shortcuts') and action.released then
		shortcut_trigger = false
	end
	
	if action_id == hash('up') and action.pressed then
		self.input.y = tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_idle_up') })
	elseif action_id == hash('down') and action.pressed then
		self.input.y = -tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_idle_down') })
	elseif action_id == hash('left') and action.pressed then
		self.input.x = -tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_idle_left') })
	elseif action_id == hash('right') and action.pressed then
		self.input.x = tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_idle_right') })
	end
	
	if vmath.length(self.input) > 0 and (shortcut_trigger == false or shortcut_trigger == nil) then
		self.moving = true
		self.dir = self.input
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('trigger_response') then
		if message.enter then
			print('collided')
			go.set_position(self.last_pos)
			self.is_in_collision = true
		else
			print('not collided')
			self.is_in_collision = false
		end
	end
end