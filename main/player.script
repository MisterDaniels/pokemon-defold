local rendercam = require 'rendercam.rendercam'
local main_module = require 'main/main'
local pokemon_module = require 'main/pokemon'

local tile_size = main_module.tile_size

function init(self)
	msg.post('.', 'acquire_input_focus')

	self.moving = false
	self.pokemon_out = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)

	msg.post('/game#spawn', 'spawn')
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		new_pos = pos + self.dir
		
		go.set_position(new_pos)
		
		self.last_pos = pos
	end

	self.input.x = 0
	self.input.y = 0
	self.moving = false
end

function final(self)
	msg.post('.', 'release_input_focus')
end

function on_input(self, action_id, action)	
	if action_id == hash('shortcuts') and action.pressed then
		shortcut_trigger = true
	end

	if action_id == hash('shortcuts') and action.released then
		shortcut_trigger = false
	end
	
	if action_id == hash('up') and action.pressed then
		self.input.y = tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_walk_up') })
	elseif action_id == hash('down') and action.pressed then
		self.input.y = -tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_walk_down') })
	elseif action_id == hash('left') and action.pressed then
		self.input.x = -tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_walk_left') })
	elseif action_id == hash('right') and action.pressed then
		self.input.x = tile_size
		msg.post('#player_sprite', 'play_animation', { id = hash('player_walk_right') })
	end

	if action_id == hash('action') and action.pressed then
		msg.post('.', 'thrown_pokemon', { pokemon_id = 1 })
	elseif action_id == hash('backward') and action.pressed then
		msg.post('.', 'hide_pokemon')
	end
	
	if vmath.length(self.input) > 0 and (shortcut_trigger == false or shortcut_trigger == nil) then
		self.moving = true
		self.dir = self.input
	end

	if self.pokemon_out == true and self.pokemon_instance then
		msg.post(self.pokemon_instance, 'follow', { direction = action_id, position = self.last_pos })
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('trigger_response') then
		if message.enter then
			print('collided')
			go.set_position(self.last_pos)
			
			msg.post(self.pokemon_instance, 'follow', { direction = hash('none'), position = hash('go_back') })
			
			self.is_in_collision = true

			msg.post('/ui#main', 'notify', { text = 'Not possible to move here' })
		else
			print('not collided')
			self.is_in_collision = false
		end
	end

	if message_id == hash('thrown_pokemon') then
		if self.pokemon_out then
			go.delete(self.pokemon_instance)
		end
		
		local selected_pokemon = pokemon_module.get_pokemon(message.pokemon_id)
		self.pokemon_instance = factory.create('/player#player_pokemon', self.last_pos, nil, { 
			owner = hash('player'),
			go = hash(selected_pokemon.go),
			name = hash(selected_pokemon.name)
		}, 1)

		self.pokemon_out = true
	end

	if message_id == hash('hide_pokemon') then
		if self.pokemon_out then
			go.delete(self.pokemon_instance)

			self.pokemon_out = false
		end
	end
end